<?php defined('BASEPATH') OR exit('No direct script access allowed');

use Describe\Describe;

/**
 * Factory Class
 */

class Factory {

	private $_ci;
	private $_rows  = array();
	private $_table = NULL;
	private $_describe = NULL;

	/**
	 * Class constructor
	 */
	public function __construct()
	{
		$this->_ci =& get_instance();
		$this->_ci->load->database();

		$database_credentials = array(
			'database' => $this->_ci->db->database,
			'hostname' => $this->_ci->db->hostname,
			'username' => $this->_ci->db->username,
			'password' => $this->_ci->db->password,
			'driver' => $this->_ci->db->dbdriver
		);

		$this->_describe = new Describe($database_credentials);
	}

	/**
	 * List all data in dropdown format
	 *
	 * @param  string $description
	 * @return array
	 */
	public function as_dropdown($description = 'description')
	{
		$table_information = $this->_describe->getInformationFromTable($this->_table);

		$data        = array('');
		$description = 'get_' . $description;
		$id          = 'get_' . $this->_describe->getPrimaryKey($this->_table);

		foreach ($this->_rows as $row) {
			$data[$row->$id()] = ucwords($row->$description());
		}

		return $data;
	}

	/**
	 * Delete the specified data from storage
	 * 
	 * @param  string  $table
	 * @param  array   $parameters
	 * @return boolean
	 */
	public function delete($table, $parameters = array())
	{
		return ($this->_ci->db->delete($table, $parameters)) ? TRUE : FALSE;
	}

	/**
	 * Find the row from the specified ID
	 *
	 * @param  string $table
	 * @param  array  parameters
	 * @return object | boolean
	 */
	public function find($table, $parameters = array())
	{
		$this->_ci->db->where($parameters);

		$query = $this->_ci->db->get($table);

		if ($query->num_rows() > 0)
		{
			return $this->_create_object($table, $query->row());
		}

		return FALSE;
	}

	/**
	 * Return all row from the specified table
	 *
	 * @param  array $delimiters
	 * @return object | boolean
	 */
	public function get_all($table, $delimiters = array())
	{
		$this->_rows  = array();
		$this->_table = $table;

		if (isset($delimiters['keyword']) && $delimiters['keyword'] != NULL)
		{
			$this->_find_by_keyword($delimiters['keyword']);
		}

		if (isset($delimiters['per_page']) && $delimiters['per_page'] != NULL)
		{
			$this->_ci->db->limit($delimiters['per_page'], $delimiters['page']);
		}

		$query = $this->_ci->db->select($table . '.*')->from($table)->get();

		if ($query->num_rows() > 0)
		{
			$this->_rows = array();
			
			foreach ($query->result() as $row)
			{
				$this->_rows[] = $this->_create_object($table, $row);
			}
		}

		return $this;
	}

	/**
	 * Return the result
	 * 
	 * @return object
	 */
	public function result()
	{
		return $this->_rows;
	}

	/**
	 * Return the number of rows from the result
	 * 
	 * @return int
	 */
	public function total_rows()
	{
		return count($this->_rows);
	}

	/**
	 * Create an object from the specified data
	 *
	 * @param  string $table
	 * @param  object $row
	 * @return User
	 */
	protected function _create_object($table, $row)
	{
		$model = new $table();
		$main_table_information = $this->_describe->getInformationFromTable($table);

		foreach ($main_table_information as $table_column)
		{
			$mutator = 'set_' . $table_column->field;
			$method = $table_column->field;
			$data = $row->$method;

			if ($table_column->key == 'MUL')
			{
				$parameters = array($table_column->referencedColumn => $data);
				$data = $this->find($table_column->referencedTable, $parameters);
			}

			$model->$mutator($data);
		}

		return $model;
	}

	/**
	 * Search for keywords based on the list of columns in the storage
	 * 
	 * @param  string $keyword
	 * @param  string $table_information
	 * @param  array  $tables
	 * @param  string $table_alias
	 */
	protected function _find_by_keyword($keyword, $table = NULL, $tables = array(), $table_alias = NULL)
	{
		if ($table == NULL)
		{
			$table = $this->_table;
		}

		if ($table_alias == NULL)
		{
			$table_alias = $table;
		}

		$table_information = $this->_describe->getInformationFromTable($table);
		array_push($tables, $table);

		if ($keyword != NULL)
		{
			$keywords = explode(' ', $keyword);

			foreach ($keywords as $keyword)
			{
				foreach ($table_information as $column)
				{
					if ($column->key == 'MUL')
					{
						if ( ! in_array($column->referencedTable, $tables))
						{
							$foreign_primary_key = $this->_describe->getPrimaryKey($column->referencedTable);
							$foreign_table_alias = $table . '_' . $column->referencedTable;
							$condition = $foreign_table_alias . '.' . $foreign_primary_key . ' = ' . $table_alias . '.' . $column->field;

							$this->_ci->db->join($column->referencedTable . ' as ' . $foreign_table_alias, $condition, 'left');

							array_push($tables, $column->referencedTable);
							$tables = array_unique($tables);
							$this->_find_by_keyword($keyword, $column->referencedTable, $tables, $foreign_table_alias);
						}
					}
					else
					{
						$this->_ci->db->or_like($table_alias . '.' . $column->field, $keyword);
					}
				}
			}
		}
	}

}