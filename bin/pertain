<?php

/**
 * This is a simple PHP script that deletes unwanted files and folders then 
 * installs and setup Doctrine (an object-relational mapper for PHP 5.3.3+) 
 * for CodeIgniter 3 be ready for writing web applications. This script is 
 * originally based from ignite.php (http://https://github.com/rougin/ignite.php)
 *
 * @author 	Rougin Gutib <rougingutib@gmail.com>
 * @link    https://github.com/rougin/combustor
 */

/**
 * ---------------------------------------------------------------------------------------------
 * Get the CodeIgniter.php core file
 * ---------------------------------------------------------------------------------------------
 */

$codeigniter_core = file_get_contents('system/core/CodeIgniter.php');

/**
 * ---------------------------------------------------------------------------------------------
 * Contents for the doctrine.php in vendor/bin
 * ---------------------------------------------------------------------------------------------
 */

$doctrine_cli =
'<?php
/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the MIT license. For more information, see
 * <http://www.doctrine-project.org>.
 */

use Symfony\Component\Console\Helper\HelperSet;
use Doctrine\ORM\Tools\Console\ConsoleRunner;

(@include_once __DIR__ . \'/../vendor/autoload.php\') || @include_once __DIR__ . \'/../../../autoload.php\';

/**
 * Path to the root folder
 */

define(\'ROOT\', __DIR__ . \'/../../../../\');

/**
 * Path to the "system" folder
 */

define(\'BASEPATH\', str_replace(\'\\\\\', \'/\', ROOT . \'system/\'));

/**
 * The path to the "application" folder
 */

define(\'APPPATH\', ROOT . \'application/\');

/**
 * Load the Doctrine Library
 */

require APPPATH . \'/libraries/Doctrine.php\';

$doctrine = new Doctrine();

$helperSet = require $doctrine->cli();

if ( ! ($helperSet instanceof HelperSet)) {
	foreach ($GLOBALS as $helperSetCandidate) {
		if ($helperSetCandidate instanceof HelperSet) {
			$helperSet = $helperSetCandidate;
			break;
		}
	}
}

\Doctrine\ORM\Tools\Console\ConsoleRunner::run($helperSet, $commands);';

/**
 * Contents for the Doctrine library
 */

$doctrine_library = 
'<?php

use Doctrine\Common\ClassLoader,
	Doctrine\ORM\Tools\Setup,
	Doctrine\ORM\EntityManager;

/**
 * Doctrine bootstrap library for CodeIgniter
 *
 * @author	Adam Elsodaney  <archfizz.co.uk>
 * @author  Rougin Gutib 	<rougin.royce@gmail.com>
 * @link	http://stackoverflow.com/questions/17121997/integrating-doctrine-with-codeigniter
 */

class Doctrine
{

	/**
	 * The variable for handling the entity manager
	 */
	public $em;

	/**
	 * Load the entity manager and load the classes
	 */
	public function __construct()
	{
		/**
		 * Load the database configuration from CodeIgniter
		 */
		
		require APPPATH . \'config/database.php\';

		$connection_options = array(
			\'driver\'        => \'pdo_mysql\',
			\'user\'          => $db[\'default\'][\'username\'],
			\'password\'      => $db[\'default\'][\'password\'],
			\'host\'          => $db[\'default\'][\'hostname\'],
			\'dbname\'        => $db[\'default\'][\'database\'],
			\'charset\'       => $db[\'default\'][\'char_set\'],
			\'driverOptions\' => array(
				\'charset\'   => $db[\'default\'][\'char_set\'],
			),
		);

		/**
		 * With this configuration, your model files need to be in application/models/
		 * e.g. Creating a new \User loads the class from application/models/User.php
		 */
		
		$metadata_paths   = array(APPPATH . \'models\');
		$models           = APPPATH . \'models\';
		$models_namespace = \'\';
		$proxies          = APPPATH . \'models/proxies\';

		/**
		 * Set $dev_mode to TRUE to disable caching while you develop
		 */
		
		$config = Setup::createAnnotationMetadataConfiguration($metadata_paths, $dev_mode = true, $proxies);
		$this->em = EntityManager::create($connection_options, $config);

		$loader = new ClassLoader($models_namespace, $models);
		$loader->register();
	}

	/**
	 * The Command Line Interface (CLI) configuration for Doctrine
	 * 
	 * @return object
	 */
	public function cli()
	{
		foreach ($GLOBALS as $helperSetCandidate) {
			if ($helperSetCandidate instanceof \Symfony\Component\Console\Helper\HelperSet) {
				$helperSet = $helperSetCandidate;
				break;
			}
		}

		$helperSet = new \Symfony\Component\Console\Helper\HelperSet(array(
			\'db\' => new \Doctrine\DBAL\Tools\Console\Helper\ConnectionHelper($this->em->getConnection()),
			\'em\' => new \Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper($this->em)
		));

		return \Doctrine\ORM\Tools\Console\ConsoleRunner::run($helperSet);
	}

}';

/**
 * ---------------------------------------------------------------------------------------------
 * Contents of MY_Loader.php
 * ---------------------------------------------------------------------------------------------
 */

$loader = '<?php defined(\'BASEPATH\') OR exit(\'No direct script access allowed\');

class MY_Loader extends CI_Loader
{

	/**
	 * Factory Loader
	 *
	 * Loads and instantiates factories.
	 * Designed to be called from application controllers.
	 *
	 * @param	string	$factory	Factory name
	 * @param	array	$params		Optional parameters to pass to the factory class constructor
	 * @param	string	$object_name	An optional object name to assign to
	 * @return	object
	 */
	public function factory($factory, $params = NULL, $object_name = NULL)
	{
		if (empty($factory))
		{
			return $this;
		}
		elseif (is_array($factory))
		{
			foreach ($factory as $key => $value)
			{
				if (is_int($key))
				{
					$this->factory($value . \'_factory\', $params);
				}
				else
				{
					$this->factory($key . \'_factory\', $params, $value);
				}
			}

			return $this;
		}

		if ($params !== NULL && ! is_array($params))
		{
			$params = NULL;
		}

		$this->_ci_load_factory($factory . \'_factory\', $params, $object_name);
		return $this;
	}

	/**
	 * Internal CI Class Loader
	 *
	 * @used-by	CI_Loader::factory()
	 * @uses	CI_Loader::_ci_init_class()
	 *
	 * @param	string	$class		Class name to load
	 * @param	mixed	$params		Optional parameters to pass to the class constructor
	 * @param	string	$object_name	Optional object name to assign to
	 * @return	void
	 */
	protected function _ci_load_factory($class, $params = NULL, $object_name = NULL)
	{
		// Get the class name, and while we\'re at it trim any slashes.
		// The directory path can be included as part of the class name,
		// but we don\'t want a leading slash
		$class = str_replace(\'.php\', \'\', trim($class, \'/\'));

		// Was the path included with the class name?
		// We look for a slash to determine this
		if (($last_slash = strrpos($class, \'/\')) !== FALSE)
		{
			// Extract the path
			$subdir = substr($class, 0, ++$last_slash);

			// Get the filename from the path
			$class = substr($class, $last_slash);
		}
		else
		{
			$subdir = \'\';
		}

		$class = ucfirst($class);
		$subclass = APPPATH.\'factories/\'.$subdir.config_item(\'subclass_prefix\').$class.\'.php\';

		// Is this a class extension request?
		if (file_exists($subclass))
		{
			$baseclass = BASEPATH.\'factories/\'.$subdir.$class.\'.php\';

			if ( ! file_exists($baseclass))
			{
				log_message(\'error\', \'Unable to load the requested class: \'.$class);
				show_error(\'Unable to load the requested class: \'.$class);
			}

			// Safety: Was the class already loaded by a previous call?
			if (class_exists(config_item(\'subclass_prefix\').$class, FALSE))
			{
				// Before we deem this to be a duplicate request, let\'s see
				// if a custom object name is being supplied. If so, we\'ll
				// return a new instance of the object
				if ($object_name !== NULL)
				{
					$CI =& get_instance();
					if ( ! isset($CI->$object_name))
					{
						return $this->_ci_init_class($class, config_item(\'subclass_prefix\'), $params, $object_name);
					}
				}

				log_message(\'debug\', $class.\' class already loaded. Second attempt ignored.\');
				return;
			}

			include_once($baseclass);
			include_once($subclass);

			return $this->_ci_init_class($class, config_item(\'subclass_prefix\'), $params, $object_name);
		}

		// Let\'s search for the requested factory file and load it.
		foreach ($this->_ci_library_paths as $path)
		{
			$filepath = $path.\'factories/\'.$subdir.$class.\'.php\';

			// Safety: Was the class already loaded by a previous call?
			if (class_exists($class, FALSE))
			{
				// Before we deem this to be a duplicate request, let\'s see
				// if a custom object name is being supplied. If so, we\'ll
				// return a new instance of the object
				if ($object_name !== NULL)
				{
					$CI =& get_instance();
					if ( ! isset($CI->$object_name))
					{
						return $this->_ci_init_class($class, \'\', $params, $object_name);
					}
				}

				log_message(\'debug\', $class.\' class already loaded. Second attempt ignored.\');
				return;
			}
			// Does the file exist? No? Bummer...
			elseif ( ! file_exists($filepath))
			{
				continue;
			}

			include_once($filepath);
			return $this->_ci_init_class($class, \'\', $params, $object_name);
		}

		// One last attempt. Maybe the factory is in a subdirectory, but it wasn\'t specified?
		if ($subdir === \'\')
		{
			return $this->_ci_load_factory($class.\'/\'.$class, $params, $object_name);
		}

		// If we got this far we were unable to find the requested class.
		log_message(\'error\', \'Unable to load the requested class: \'.$class);
		show_error(\'Unable to load the requested class: \'.$class);
	}

}';

/**
 * ---------------------------------------------------------------------------------------------
 * Adding the MY_Loader.php to the "core" directory
 * ---------------------------------------------------------------------------------------------
 */

if ( ! file_exists('application/core/MY_Loader.php'))
{
	$file = fopen('application/core/MY_Loader.php', 'wb');
	file_put_contents('application/core/MY_Loader.php', $loader);
	fclose($file);
}

/**
 * ---------------------------------------------------------------------------------------------
 * Adding the composer autoload file in index.php
 * ---------------------------------------------------------------------------------------------
 */

if (strpos($codeigniter_core, 'define(\'CI_VERSION\', \'3.0-dev\')') === FALSE)
{
	$index = file_get_contents('index.php');
	
	if (strpos($index, 'include_once \'vendor/autoload.php\';') === FALSE)
	{
		$search  = ' * LOAD THE BOOTSTRAP FILE';
		$replace =
		' * LOAD THE COMPOSER AUTOLOAD FILE
		 * --------------------------------------------------------------------
		 */
		include_once \'vendor/autoload.php\';

		/*
		 * --------------------------------------------------------------------
		 * LOAD THE BOOTSTRAP FILE';

		$index = str_replace($search, $replace, $index);

		$file = fopen('index.php', 'wb');
		file_put_contents('index.php', $index);
		fclose($file);
	}
}
else
{
	$config = file_get_contents('application/config/config.php');

	$search  = '$config[\'composer_autoload\'] = FALSE;';
	$replace = '$config[\'composer_autoload\'] = \'vendor/autoload.php\';';

	$config = str_replace($search, $replace, $config);

	$file = fopen('application/config/config.php', 'wb');
	file_put_contents('application/config/config.php', $config);
	fclose($file);
}

/**
 * ---------------------------------------------------------------------------------------------
 * Modify the contents of vendor/bin/doctrine.php, create the Doctrine library and create a
 * "proxies" directory for lazy loading
 * ---------------------------------------------------------------------------------------------
 */

file_put_contents('vendor/bin/doctrine.php', $doctrine_cli);
file_put_contents('vendor/doctrine/orm/bin/doctrine.php', $doctrine_cli);

$file = fopen('application/libraries/Doctrine.php', 'wb');
file_put_contents('application/libraries/Doctrine.php', $doctrine_library);

if ( ! is_dir('application/models/proxies')) {
	mkdir('application/models/proxies');
	chmod('application/models/proxies', 0777);
}

fclose($file);

/**
 * ---------------------------------------------------------------------------------------------
 * Autoload the Doctrine library
 * ---------------------------------------------------------------------------------------------
 */

$autoload = file_get_contents('application/config/autoload.php');
$search   = array('$autoload[\'libraries\'] = array();');
$replace  = array('$autoload[\'libraries\'] = array(\'doctrine\');');

$contents = str_replace($search, $replace, $autoload);
file_put_contents('application/config/autoload.php', $contents);

/**
 * ---------------------------------------------------------------------------------------------
 * Include the Base Model class in Doctrine CLI
 * ---------------------------------------------------------------------------------------------
 */

$abstract_command = file_get_contents('vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/AbstractCommand.php');

$search  = 'use Doctrine\ORM\Tools\SchemaTool;';
$replace = 'use Doctrine\ORM\Tools\SchemaTool;

include BASEPATH . \'core/Model.php\';';

$contents = $abstract_command;

if (strpos($abstract_command, 'use Doctrine\ORM\Tools\SchemaTool;') !== FALSE) {
	if (strpos($abstract_command, 'include BASEPATH . \'core/Model.php\';') === FALSE) {
		$contents = str_replace($search, $replace, $abstract_command);
	}
}

file_put_contents('vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/AbstractCommand.php', $contents);

echo 'Doctrine is now set up for CodeIgniter!', PHP_EOL;