#!/usr/bin/env php
<?php

/**
 * This is a simple PHP script that deletes unwanted files and folders then 
 * installs and setup Doctrine (an object-relational mapper for PHP 5.3.3+) 
 * for CodeIgniter 3 be ready for writing web applications. This script is 
 * originally based from ignite.php (http://https://github.com/rougin/ignite.php)
 *
 * @author 	Rougin Gutib <rougingutib@gmail.com>
 * @link    https://github.com/rougin/combustor
 */

$question = 'What would you like to install into CodeIgniter?
[1] Customized factory pattern
[2] Doctrine, an object relational mapper (ORM)
[3] Both of them
Just choose from 1 to 3: ';

if (PHP_OS == 'WINNT')
{
	echo $question;
	$answer = stream_get_line(STDIN, 1024, PHP_EOL);
}
else
{
	echo $question;
	$answer = readline();
}

if ($answer != 1 && $answer != 2 && $answer != 3)
{
	exit();
}

switch ($answer)
{
	case 1:
		$answer = 'factory';
		break;
	case 2:
		$answer = 'doctrine';
		break;
	case 3:
		$answer = 'both';
		break;
}

/**
 * ---------------------------------------------------------------------------------------------
 * Get the CodeIgniter.php core file
 * ---------------------------------------------------------------------------------------------
 */

$codeigniter_core = file_get_contents('system/core/CodeIgniter.php');

/**
 * ---------------------------------------------------------------------------------------------
 * Adding the Composer autoload file in index.php
 * ---------------------------------------------------------------------------------------------
 */

if (strpos($codeigniter_core, 'define(\'CI_VERSION\', \'3.0') === FALSE)
{
	$index = file_get_contents('index.php');
	
	if (strpos($index, 'include_once \'vendor/autoload.php\';') === FALSE)
	{
		$search  = ' * LOAD THE BOOTSTRAP FILE';
		$replace =
' * LOAD THE COMPOSER AUTOLOAD FILE
 * --------------------------------------------------------------------
 */
include_once \'vendor/autoload.php\';

/*
 * --------------------------------------------------------------------
 * LOAD THE BOOTSTRAP FILE';

		$index = str_replace($search, $replace, $index);

		$file = fopen('index.php', 'wb');
		file_put_contents('index.php', $index);
		fclose($file);
	}
}
else
{
	$config = file_get_contents('application/config/config.php');

	$search  = '$config[\'composer_autoload\'] = FALSE;';
	$replace = '$config[\'composer_autoload\'] = \'vendor/autoload.php\';';

	$config = str_replace($search, $replace, $config);

	$file = fopen('application/config/config.php', 'wb');
	file_put_contents('application/config/config.php', $config);
	fclose($file);
}

/**
 * ---------------------------------------------------------------------------------------------
 * Install Doctrine and add additional commands to Combustor (if the user selects it)
 * ---------------------------------------------------------------------------------------------
 */

if ($answer == 'doctrine' || $answer == 'both')
{
	$composer = file_get_contents('composer.json');
	
	$composer = str_replace(
		'"rougin/combustor": "dev-master"',
		'"rougin/combustor": "dev-master",' . "\n		" .
		'"doctrine/orm": "2.4.*"',
		$composer
	);

	$file = fopen('composer.json', 'wb');
	file_put_contents('composer.json', $composer);
	fclose($file);
	system('composer update');
	
	$combustor = file_get_contents('vendor/rougin/combustor/bin/combustor.php');

	if (strpos($combustor, '$application->add(new Combustor\Doctrine\CreateControllerCommand)') !== FALSE)
	{
		$combustor = str_replace(
			'$application = new Application(\'Combustor\', \'1\');',
			'$application = new Application(\'Combustor\', \'1\');' . "\n" . 
			'$application->add(new Combustor\Doctrine\CreateControllerCommand);' . "\n" .
			'$application->add(new Combustor\Doctrine\CreateModelCommand);',
			$combustor
		);

		$file = fopen('vendor/rougin/combustor/bin/combustor.php', 'wb');
		file_put_contents('vendor/rougin/combustor/bin/combustor.php', $combustor);
		fclose($file);
	}

}

/**
 * ---------------------------------------------------------------------------------------------
 * Autoload the other libraries and helpers
 * ---------------------------------------------------------------------------------------------
 */

$libraries = NULL;
$session = (strpos($codeigniter_core, 'define(\'CI_VERSION\', \'3.0') === FALSE) ? '\'session\'' : NULL;

if ($answer == 'factory')
{
	$comma = (is_string($session)) ? ', ' : NULL;
	$libraries = $comma . '\'factory\'';
}
else if ($answer == 'doctrine')
{
	$comma = (is_string($session)) ? ', ' : NULL;
	$libraries = $comma . '\'doctrine\'';
}
else if ($answer == 'both')
{
	$comma = (is_string($session)) ? ', ' : NULL;
	$libraries = $comma . '\'doctrine\', \'factory\'';
}

$autoload = file_get_contents('application/config/autoload.php');

$search = array(
	'$autoload[\'libraries\'] = array();',
	'$autoload[\'helper\'] = array();'
);

$replace = array(
	'$autoload[\'libraries\'] = array(' . $session . $libraries . ');',
	'$autoload[\'helper\'] = array(\'url\', \'form\');'
);

if (strpos($codeigniter_core, 'define(\'CI_VERSION\', \'3.0') !== FALSE)
{
	$search[]  = '$autoload[\'drivers\'] = array();';
	$replace[] = '$autoload[\'drivers\'] = array(\'cache\', \'session\');';
}

$contents = str_replace($search, $replace, $autoload);
file_put_contents('application/config/autoload.php', $contents);

if ($answer == 'factory' || $answer == 'both')
{
	/**
	 * ---------------------------------------------------------------------------------------------
	 * Contents of Factory.php
	 * ---------------------------------------------------------------------------------------------
	 */

	$factory = 
'<?php defined(\'BASEPATH\') OR exit(\'No direct script access allowed\');

use Combustor\Tools\Describe;

class Factory {

	private $_ci;
	private $_rows  = array();
	private $_table = NULL;

	/**
	 * Class constructor
	 */
	public function __construct()
	{
		$this->_ci =& get_instance();
		$this->_ci->load->database();
	}

	/**
	 * List all data in dropdown format
	 *
	 * @param  string $description
	 * @return array
	 */
	public function as_dropdown($description = \'description\')
	{
		$tableDescription = new Describe($this->_table);
		
		$data        = array(\'\');
		$description = \'get_\' . $description;
		$id          = \'get_\' . $tableDescription->getPrimaryKey();

		foreach ($this->_rows as $row) {
			$data[$row->$id()] = ucwords($row->$description());
		}

		return $data;
	}

	/**
	 * Delete the specified data from storage
	 * 
	 * @param  string $table
	 * @param  array  $parameters
	 * @return boolean
	 */
	public function delete($table, $parameters = array())
	{
		return ($this->_ci->db->delete($table, $parameters)) ? TRUE : FALSE;
	}

	/**
	 * Find the row from the specified ID
	 *
	 * @param  string $table
	 * @param  array  parameters
	 * @return object | boolean
	 */
	public function find($table, $parameters = array())
	{
		$query = $this->_ci->db->get_where($table, $parameters);

		if ($query->num_rows() > 0)
		{
			return $this->_create_object($table, $query->row());
		}

		return FALSE;
	}

	/**
	 * Return all row from the specified table
	 *
	 * @param  array $delimiters
	 * @return object | boolean
	 */
	public function get_all($table, $delimiters = array())
	{
		$this->_table = $table;

		if (isset($delimiters[\'keyword\']) && $delimiters[\'keyword\'] != NULL)
		{
			$this->_find_by_keyword($delimiters[\'keyword\']);
		}

		if (isset($delimiters[\'per_page\']) && $delimiters[\'per_page\'] != NULL)
		{
			$this->_ci->db->limit($delimiters[\'per_page\'], $delimiters[\'page\']);
		}

		$query = $this->_ci->db->select(\'*\')->from($table)->get();

		if ($query->num_rows() > 0)
		{
			$this->_rows = array();
			
			foreach ($query->result() as $row)
			{
				$this->_rows[] = $this->_create_object($table, $row);
			}
		}

		return $this;
	}

	/**
	 * Return the result
	 * 
	 * @return object
	 */
	public function result()
	{
		return $this->_rows;
	}

	/**
	 * Return the number of rows from the result
	 * 
	 * @return int
	 */
	public function total_rows()
	{
		return count($this->_rows);
	}

	/**
	 * Create an object from the specified data
	 *
	 * @param  string $table
	 * @param  object $row
	 * @return User
	 */
	protected function _create_object($table, $row)
	{
		$model = new $table();
		$main_table = new Describe($table);

		foreach ($main_table->result() as $table_row)
		{
			$mutator = \'set_\' . $table_row->field;
			$method = $table_row->field;
			$data = $row->$method;

			if ($table_row->key == \'MUL\')
			{
				$parameters = array($table_row->referenced_column => $data);

				$data = $this->find($table_row->referenced_table, $parameters);
			}

			$model->$mutator($data);
		}

		return $model;
	}

	/**
	 * Search for keywords based on the list of columns in the storage
	 * 
	 * @param  string $keyword
	 */
	protected function _find_by_keyword($keyword)
	{
		if ($keyword != NULL)
		{
			$keywords = explode(\' \', $keyword);

			foreach ($keywords as $keyword)
			{
				foreach ($this->_columns as $column)
				{
					$this->_ci->db->like($column);
				}
			}
		}
	}

}';

	/**
	 * ---------------------------------------------------------------------------------------------
	 * Adding the Factory.php to the "libraries" directory
	 * ---------------------------------------------------------------------------------------------
	 */

	if ( ! file_exists('application/libraries/Factory.php'))
	{
		$file = fopen('application/libraries/Factory.php', 'wb');
		file_put_contents('application/libraries/Factory.php', $factory);
		fclose($file);
	}

	echo 'The customized factory pattern is now set up for CodeIgniter!' . PHP_EOL;
}

if ($answer == 'doctrine' || $answer == 'both')
{
	/**
	 * ---------------------------------------------------------------------------------------------
	 * Contents for the doctrine.php in vendor/bin
	 * ---------------------------------------------------------------------------------------------
	 */

	$doctrine_cli =
'<?php
/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the MIT license. For more information, see
 * <http://www.doctrine-project.org>.
 */

use Symfony\Component\Console\Helper\HelperSet;
use Doctrine\ORM\Tools\Console\ConsoleRunner;

(@include_once __DIR__ . \'/../vendor/autoload.php\') || @include_once __DIR__ . \'/../../../autoload.php\';

/**
 * Path to the root folder
 */

define(\'ROOT\', __DIR__ . \'/../../../../\');

/**
 * Path to the "system" folder
 */

define(\'BASEPATH\', str_replace(\'\\\\\', \'/\', ROOT . \'system/\'));

/**
 * The path to the "application" folder
 */

define(\'APPPATH\', ROOT . \'application/\');

/**
 * Load the Doctrine Library
 */

require APPPATH . \'/libraries/Doctrine.php\';

$doctrine = new Doctrine();

$helperSet = require $doctrine->cli();

if ( ! ($helperSet instanceof HelperSet)) {
	foreach ($GLOBALS as $helperSetCandidate) {
		if ($helperSetCandidate instanceof HelperSet) {
			$helperSet = $helperSetCandidate;
			break;
		}
	}
}

\Doctrine\ORM\Tools\Console\ConsoleRunner::run($helperSet, $commands);';

	/**
	 * Contents for the Doctrine library
	 */

	$doctrine_library = 
'<?php

use Doctrine\Common\ClassLoader,
	Doctrine\ORM\Tools\Setup,
	Doctrine\ORM\EntityManager;

/**
 * Doctrine bootstrap library for CodeIgniter
 *
 * @author	Adam Elsodaney  <archfizz.co.uk>
 * @author  Rougin Gutib 	<rougin.royce@gmail.com>
 * @link	http://stackoverflow.com/questions/17121997/integrating-doctrine-with-codeigniter
 */

class Doctrine
{

	/**
	 * The variable for handling the entity manager
	 */
	public $em;

	/**
	 * Load the entity manager and load the classes
	 */
	public function __construct()
	{
		/**
		 * Load the database configuration from CodeIgniter
		 */
		
		require APPPATH . \'config/database.php\';

		$connection_options = array(
			\'driver\'        => \'pdo_mysql\',
			\'user\'          => $db[\'default\'][\'username\'],
			\'password\'      => $db[\'default\'][\'password\'],
			\'host\'          => $db[\'default\'][\'hostname\'],
			\'dbname\'        => $db[\'default\'][\'database\'],
			\'charset\'       => $db[\'default\'][\'char_set\'],
			\'driverOptions\' => array(
				\'charset\'   => $db[\'default\'][\'char_set\'],
			),
		);

		/**
		 * With this configuration, your model files need to be in application/models/
		 * e.g. Creating a new \User loads the class from application/models/User.php
		 */
		
		$metadata_paths   = array(APPPATH . \'models\');
		$models           = APPPATH . \'models\';
		$models_namespace = \'\';
		$proxies          = APPPATH . \'models/proxies\';

		/**
		 * Set $dev_mode to TRUE to disable caching while you develop
		 */
		
		$config = Setup::createAnnotationMetadataConfiguration($metadata_paths, $dev_mode = true, $proxies);
		$this->em = EntityManager::create($connection_options, $config);

		$loader = new ClassLoader($models_namespace, $models);
		$loader->register();
	}

	/**
	 * The Command Line Interface (CLI) configuration for Doctrine
	 * 
	 * @return object
	 */
	public function cli()
	{
		foreach ($GLOBALS as $helperSetCandidate) {
			if ($helperSetCandidate instanceof \Symfony\Component\Console\Helper\HelperSet) {
				$helperSet = $helperSetCandidate;
				break;
			}
		}

		$helperSet = new \Symfony\Component\Console\Helper\HelperSet(array(
			\'db\' => new \Doctrine\DBAL\Tools\Console\Helper\ConnectionHelper($this->em->getConnection()),
			\'em\' => new \Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper($this->em)
		));

		return \Doctrine\ORM\Tools\Console\ConsoleRunner::run($helperSet);
	}

}';

	/**
	 * ---------------------------------------------------------------------------------------------
	 * Modify the contents of vendor/bin/doctrine.php, create the Doctrine library and create a
	 * "proxies" directory for lazy loading
	 * ---------------------------------------------------------------------------------------------
	 */

	file_put_contents('vendor/bin/doctrine.php', $doctrine_cli);
	file_put_contents('vendor/doctrine/orm/bin/doctrine.php', $doctrine_cli);

	$file = fopen('application/libraries/Doctrine.php', 'wb');
	file_put_contents('application/libraries/Doctrine.php', $doctrine_library);

	if ( ! is_dir('application/models/proxies')) {
		mkdir('application/models/proxies');
		chmod('application/models/proxies', 0777);
	}

	fclose($file);

	/**
	 * ---------------------------------------------------------------------------------------------
	 * Include the Base Model class in Doctrine CLI
	 * ---------------------------------------------------------------------------------------------
	 */

	$abstract_command = file_get_contents('vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/AbstractCommand.php');

	$search  = 'use Doctrine\ORM\Tools\SchemaTool;';
	$replace = 'use Doctrine\ORM\Tools\SchemaTool;

	include BASEPATH . \'core/Model.php\';';

	$contents = $abstract_command;

	if (strpos($abstract_command, 'use Doctrine\ORM\Tools\SchemaTool;') !== FALSE) {
		if (strpos($abstract_command, 'include BASEPATH . \'core/Model.php\';') === FALSE) {
			$contents = str_replace($search, $replace, $abstract_command);
		}
	}

	file_put_contents('vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/AbstractCommand.php', $contents);

	echo 'Doctrine is now set up for CodeIgniter!' . PHP_EOL;
}